{"version":3,"sources":["webpack://smartcharts/./src/feed/Feed.ts"],"names":["Feed","_mainStore","state","startEpoch","endEpoch","chart","granularity","context","loader","margin","paginationLoader","binaryApi","stx","mainStore","tradingTimes","last_tick_timestamp","Date","getTime","_last_tick_timestamp","_binaryApi","_connectionClosedDate","_emitter","_serverTime","_stx","_tradingTimes","_activeStreams","_isConnectionOpened","onRangeChanged","forceLoad","periodicity","calculateTimeUnitInterval","rangeTime","maxTicks","dtLeft","dtRight","setChartIsReady","CIQ","strToDateTime","getUTCDate","undefined","setRange","home","layout","range","scaleChart","saveLayout","ServerTime","getInstance","reaction","isConnectionOpened","onConnectionChanged","bind","EventEmitter","emitDelay","animations","liveScroll","running","stop","maxMasterDataSize","lockScroll","isDisplayFullMode","setMaxTicks","dataSet","length","Math","floor","scroll","isScrollLocationChanged","minimumZoomTicks","draw","symbol","period","interval","calculateGranularity","key","_getKey","_forgetStream","forget","suggestedStartDate","_suggestedEndDate","params","callback","getEpoch","setHasReachedEndOfData","updateOnPagination","symbolObject","localDate","getLocalDate","isComparisonChart","start","end","getTimezoneOffset","comparisonChartSymbol","symbolName","name","setState","isFeedUnavailable","notifier","notifyFeedUnavailable","dataCallback","quotes","error","suppressAlert","setChartAvailability","tickHistoryRequest","count","lastDigitStats","getHistoryOnly","String","isMarketOpened","delay","getDelayedMinutes","notifyDelayedMarket","subscription","DelayedSubscription","RealtimeSubscription","unsubscribeAll","initialFetch","new_quotes","response","filter","quote","updateLastDigitStats","text","message","notify","type","category","onChartData","tickResponse","isDestroyed","_appendChartData","notifyMarketClose","getTickHistory","TickHistoryFormatter","formatHistory","_trimQuotes","updateYaxisWidth","_emitDataUpdate","setMaxtTick","endDate","getUTCEpoch","isMainChart","emit","EVENT_START_PAGINATION","_getPaginationData","moreAvailable","EVENT_ON_PAGINATION","now","startLimit","ceil","result","max","console","log","hide","firstEpoch","getFirstEpoch","newStart","paginationEnd","hasReachedEndOfData","Object","keys","lastEpoch","lastStreamEpoch","isStaticChart","valueOf","slice","DT","warn","current_tick_timestamp","_forgetIfEndEpoch","updateChartData","Close","fillGaps","createDataSet","secondarySeries","noCreateDataSet","allowReplaceOHL","refreshChart","isChartReinitialized","prev","prevClose","dataUpdate","EVENT_MASTER_DATA_REINITIALIZE","EVENT_MASTER_DATA_UPDATE","EVENT_COMPARISON_DATA_UPDATE","on","off","isOpened","_onConnectionReopened","_onConnectionClosed","pause","_unpackKey","elapsedSeconds","maxIdleSeconds","_resumeStream","resume","then","split","startTickIndex","endTickIndex","trimmedQuotes","findIndex","tick","addon","candles","history","epoch","times"],"mappings":"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","file":"main.10bbca.hot-update.js","sourcesContent":["import EventEmitter from 'event-emitter-es6';\nimport { reaction } from 'mobx';\nimport { TicksHistoryRequest, TicksHistoryResponse } from '@deriv/api-types';\nimport { Listener, TError, TGranularity, TMainStore, TQuote } from 'src/types';\nimport { TCreateTickHistoryParams } from 'src/binaryapi/BinaryAPI';\nimport { BinaryAPI, TradingTimes } from 'src/binaryapi';\nimport Context from 'src/components/ui/Context';\nimport { TickHistoryFormatter } from './TickHistoryFormatter';\nimport { calculateGranularity, getUTCEpoch, calculateTimeUnitInterval, getUTCDate } from '../utils';\nimport { RealtimeSubscription, DelayedSubscription } from './subscription';\nimport ServerTime from '../utils/ServerTime';\nimport { TQuoteResponse } from './subscription/Subscription';\n\ntype TPaginationParams = {\n    period: number;\n    interval: string;\n    symbolObject: {\n        name: string;\n        symbol: string;\n    };\n};\n\ntype TPaginationCallback = (params: { quotes?: TQuote[]; error?: unknown; moreAvailable?: boolean }) => void;\n\nclass Feed {\n    last_tick_timestamp = new Date().getTime();\n    _last_tick_timestamp: number;\n\n    _binaryApi: BinaryAPI;\n    _connectionClosedDate?: Date;\n    _emitter: EventEmitter;\n    _mainStore: TMainStore;\n    _serverTime: ServerTime;\n    _stx: Context['stx'];\n    _tradingTimes: TradingTimes;\n    static get EVENT_MASTER_DATA_UPDATE() {\n        return 'EVENT_MASTER_DATA_UPDATE';\n    }\n    static get EVENT_MASTER_DATA_REINITIALIZE() {\n        return 'EVENT_MASTER_DATA_REASSIGN';\n    }\n    static get EVENT_COMPARISON_DATA_UPDATE() {\n        return 'EVENT_COMPARISON_DATA_UPDATE';\n    }\n    static get EVENT_START_PAGINATION() {\n        return 'EVENT_START_PAGINATION';\n    }\n    static get EVENT_ON_PAGINATION() {\n        return 'EVENT_ON_PAGINATION';\n    }\n    get startEpoch() {\n        return this._mainStore.state.startEpoch;\n    }\n    get endEpoch() {\n        return this._mainStore.state.endEpoch;\n    }\n    get granularity() {\n        return this._mainStore.chart.granularity;\n    }\n    get context() {\n        return this._mainStore.chart.context;\n    }\n    get loader() {\n        return this._mainStore.loader;\n    }\n    get margin() {\n        return this._mainStore.state.margin;\n    }\n    get paginationLoader() {\n        return this._mainStore.paginationLoader;\n    }\n    _activeStreams: Record<string, DelayedSubscription | RealtimeSubscription> = {};\n    _isConnectionOpened = true;\n    constructor(binaryApi: BinaryAPI, stx: Context['stx'], mainStore: TMainStore, tradingTimes: TradingTimes) {\n        this._stx = stx;\n        this._binaryApi = binaryApi;\n        this._mainStore = mainStore;\n        this._serverTime = ServerTime.getInstance();\n        this._last_tick_timestamp = 0;\n        this._tradingTimes = tradingTimes;\n        reaction(() => mainStore.state.isConnectionOpened, this.onConnectionChanged.bind(this));\n        this._emitter = new EventEmitter({ emitDelay: 0 });\n    }\n    onRangeChanged = (forceLoad: boolean) => {\n        const periodicity = calculateTimeUnitInterval(this.granularity);\n        const rangeTime = (this.granularity || 1) * this._stx.chart.maxTicks;\n        let dtLeft = null;\n        let dtRight = null;\n        this._mainStore.state.setChartIsReady(false);\n        if (!this.endEpoch) {\n            if (this.startEpoch) {\n                dtLeft = this.startEpoch ? CIQ.strToDateTime(getUTCDate(this.startEpoch)) : undefined;\n            }\n        } else {\n            dtLeft = CIQ.strToDateTime(getUTCDate(this.startEpoch || this.endEpoch - rangeTime));\n            dtRight = CIQ.strToDateTime(getUTCDate(this.endEpoch));\n        }\n        this._stx.setRange({ dtLeft, dtRight, periodicity, forceLoad }, () => {\n            if (!this.endEpoch && !this.startEpoch) {\n                this._stx.home();\n                delete this._stx.layout.range;\n            } else {\n                this.scaleChart();\n            }\n            this._mainStore.state.saveLayout();\n            this._mainStore.state.setChartIsReady(true);\n        });\n    };\n    scaleChart() {\n        if (this.startEpoch) {\n            if (this._stx.animations.liveScroll && this._stx.animations.liveScroll.running) {\n                this._stx.animations.liveScroll.stop();\n            }\n            if (!this.endEpoch) {\n                this._stx.maxMasterDataSize = 0;\n                this._stx.chart.lockScroll = true;\n            } else {\n                this._stx.chart.isDisplayFullMode = false;\n                this._stx.chart.lockScroll = false;\n            }\n            this._stx.setMaxTicks(\n                this._stx.chart.dataSet.length + (Math.floor(this._stx.chart.dataSet.length / 5) || 2)\n            );\n            this._stx.chart.scroll = this._stx.chart.dataSet.length;\n            this._stx.chart.isScrollLocationChanged = true;\n            /**\n             * for tick condition with few points, in that case, if your try to zoom in\n             * as the maxTicks is less than minimumZoomTicks, chart zoom out beside of\n             * zoom in, as a result, we try to override the minimumZoomTicks to prevent that\n             */\n            if (this._stx.chart.maxTicks < this._stx.minimumZoomTicks) {\n                this._stx.minimumZoomTicks = this._stx.chart.maxTicks - 1;\n            }\n            this._stx.draw();\n        }\n    }\n    // although not used, subscribe is overridden so that unsubscribe will be called by ChartIQ\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    subscribe() {}\n    // Do not call explicitly! Method below is called by ChartIQ when unsubscribing symbols.\n    unsubscribe({ symbol, period, interval }: { symbol: string; period: number; interval: string }) {\n        // the chart forgets the ticks_history of the main chart symbol before sending a new request in fetchInitialData function.\n        if (this._stx.chart.symbol === symbol) return;\n        const granularity = calculateGranularity(period, interval);\n        const key = this._getKey({ symbol, granularity });\n        this._forgetStream(key);\n    }\n    _forgetStream(key: string) {\n        if (this._activeStreams[key]) {\n            this._activeStreams[key].forget();\n            delete this._activeStreams[key];\n        }\n    }\n    async fetchInitialData( // this might be the way to refresh the chart\n        symbol: string,\n        suggestedStartDate: Date,\n        _suggestedEndDate: Date,\n        params: TPaginationParams,\n        callback: TPaginationCallback\n    ) {\n        this._last_tick_timestamp = this._serverTime.getEpoch();\n        this.setHasReachedEndOfData(false);\n        this.paginationLoader.updateOnPagination(true);\n        const { period, interval, symbolObject } = params;\n        const granularity = calculateGranularity(period, interval);\n        const key = this._getKey({ symbol, granularity });\n        const localDate = this._serverTime.getLocalDate();\n        if (suggestedStartDate > localDate) suggestedStartDate = localDate;\n        if (!this.startEpoch && ((suggestedStartDate as unknown) as number) > (this.endEpoch as number)) {\n            suggestedStartDate = CIQ.strToDateTime(getUTCDate((this.endEpoch as number) - 200000));\n        }\n        const isComparisonChart = this._stx.chart.symbol !== symbol;\n        let start = this.startEpoch || Math.floor((((suggestedStartDate as unknown) as number) / 1000) | 0);\n        start = this.margin && this.startEpoch ? start - this.margin : start;\n        const end = this.margin && this.endEpoch ? this.endEpoch + this.margin : this.endEpoch;\n        if (isComparisonChart) {\n            // Strange issue where comparison series is offset by timezone...\n            start -= suggestedStartDate.getTimezoneOffset() * 60;\n        }\n        const comparisonChartSymbol = isComparisonChart ? symbol : undefined;\n        const symbolName = symbolObject.name;\n        this.loader.setState('chart-data');\n        if (this._tradingTimes.isFeedUnavailable(symbol)) {\n            this._mainStore.notifier.notifyFeedUnavailable(symbolName);\n            let dataCallback: {\n                error?: string;\n                suppressAlert?: boolean;\n                quotes: TQuote[];\n            } = { quotes: [] };\n            if (isComparisonChart) {\n                // Passing error will prevent the chart from being shown; for\n                // main chart we still want the chart to be shown, just disabled\n                dataCallback = { error: 'StreamingNotAllowed', suppressAlert: true, ...dataCallback };\n            } else {\n                this._mainStore.chart.setChartAvailability(false);\n            }\n            callback(dataCallback);\n            return;\n        }\n        const tickHistoryRequest: Partial<TCreateTickHistoryParams> = {\n            symbol,\n            granularity: granularity as TicksHistoryRequest['granularity'],\n            start: this.endEpoch ? start : undefined,\n            count: this.endEpoch ? undefined : this._mainStore.lastDigitStats.count,\n        };\n        let getHistoryOnly = false;\n        let quotes: TQuote[] | undefined;\n        if (end) {\n            // When there is end; no streaming required\n            tickHistoryRequest.end = String(end);\n            getHistoryOnly = true;\n        } else if (this._tradingTimes.isMarketOpened(symbol)) {\n            let subscription: DelayedSubscription | RealtimeSubscription;\n            const delay = this._tradingTimes.getDelayedMinutes(symbol);\n            if (delay > 0) {\n                this._mainStore.notifier.notifyDelayedMarket(symbolName, delay);\n                subscription = new DelayedSubscription(\n                    tickHistoryRequest as TCreateTickHistoryParams,\n                    this._binaryApi,\n                    this._stx,\n                    delay\n                );\n            } else {\n                subscription = new RealtimeSubscription(\n                    tickHistoryRequest as TCreateTickHistoryParams,\n                    this._binaryApi,\n                    this._stx\n                );\n            }\n            try {\n                // The chart should forget all ticks_history subscriptions when the symbol/granularity of the main chart is changed before sending the new request.\n                if (!isComparisonChart) {\n                    this.unsubscribeAll();\n                }\n                const { quotes: new_quotes, response } = await subscription.initialFetch();\n                quotes = new_quotes.filter(quote => {\n                    return new Date(`${quote.Date}Z`).getTime() / 1000 >= start;\n                });\n\n                if (!this.endEpoch) {\n                    this._mainStore.lastDigitStats.updateLastDigitStats(response);\n                }\n            } catch (error) {\n                const { message: text } = error as TError;\n                this._mainStore.notifier.notify({\n                    text: text as string,\n                    type: 'error',\n                    category: 'activesymbol',\n                });\n                callback({ quotes: [] });\n                this.paginationLoader.updateOnPagination(false);\n                return;\n            }\n            subscription.onChartData((tickResponse: TQuote[]) => {\n                // Append comming ticks to chart only if it belongs to selected symbol after symbol changes\n                if (isComparisonChart || symbol === this._stx.chart.symbol) {\n                    if (this._stx.isDestroyed) return;\n                    this._appendChartData(tickResponse, key, comparisonChartSymbol);\n                }\n            });\n            // if symbol is changed before request is completed, past request needs to be forgotten:\n            if (!isComparisonChart && this._stx.chart.symbol !== symbol) {\n                callback({ quotes: [] });\n                subscription.forget();\n                return;\n            }\n            this._activeStreams[key] = subscription;\n        } else {\n            this._mainStore.notifier.notifyMarketClose(symbolName);\n            // Although market is closed, we display the past tick history data\n            getHistoryOnly = true;\n        }\n        if (getHistoryOnly) {\n            const response: TicksHistoryResponse = await this._binaryApi.getTickHistory(\n                tickHistoryRequest as TCreateTickHistoryParams\n            );\n            quotes = TickHistoryFormatter.formatHistory(response);\n        }\n        if (!quotes) {\n            callback({ quotes: [] });\n            return;\n        }\n        quotes = this._trimQuotes(quotes);\n        callback({ quotes });\n        this._mainStore.chart.updateYaxisWidth();\n        this.scaleChart();\n        this._emitDataUpdate(quotes, comparisonChartSymbol, true);\n        this._mainStore.state.setMaxtTick();\n        this.paginationLoader.updateOnPagination(false);\n    }\n    async fetchPaginationData(\n        symbol: string,\n        suggestedStartDate: Date,\n        endDate: Date,\n        params: TPaginationParams,\n        callback: TPaginationCallback\n    ) {\n        const end = getUTCEpoch(endDate);\n        const start = getUTCEpoch(suggestedStartDate);\n        const { period, interval } = params;\n        const granularity = calculateGranularity(period, interval);\n        const isMainChart = this._stx.chart.symbol === symbol;\n        if (isMainChart) {\n            // ignore comparisons\n            this._emitter.emit(Feed.EVENT_START_PAGINATION, { start, end });\n        }\n        await this._getPaginationData(symbol, granularity, start, end, callback);\n    }\n    async _getPaginationData(\n        symbol: string,\n        granularity: TGranularity,\n        start: number,\n        end: number,\n        callback: TPaginationCallback\n    ) {\n        const isMainChart = this._stx.chart.symbol === symbol;\n        // TODO There is no need to get historical data before startTime\n        if (this.startEpoch /* && start < this.startEpoch */ || (this.endEpoch && end > this.endEpoch)) {\n            callback({ moreAvailable: false, quotes: [] });\n            if (isMainChart) {\n                // ignore comparisons\n                this._emitter.emit(Feed.EVENT_ON_PAGINATION, { start, end });\n                this.setHasReachedEndOfData(true);\n            }\n            return;\n        }\n        const now = this._serverTime.getEpoch();\n        // Tick history data only goes as far back as 3 years:\n        const startLimit = now - Math.ceil(2.8 * 365 * 24 * 60 * 60); /* == 3 Years */\n        let result: Partial<TQuoteResponse> = { quotes: [] };\n        let firstEpoch: number | undefined;\n        if (end > startLimit) {\n            try {\n                const response = await this._binaryApi.getTickHistory({\n                    symbol,\n                    granularity: granularity as TicksHistoryRequest['granularity'],\n                    start: Math.floor(Math.max(start, startLimit)),\n                    end: String(end),\n                });\n                console.log('');\n                console.error('HEREEEEEEEÈ');\n                console.log(response);\n                if (response.error) {\n                    const { message: text } = response.error as TError;\n                    this.loader.hide();\n                    this.paginationLoader.updateOnPagination(false);\n                    this._mainStore.notifier.notify({\n                        text: text as string,\n                        type: 'error',\n                        category: 'activesymbol',\n                    });\n                    callback({ error: response.error });\n                    return;\n                }\n                firstEpoch = Feed.getFirstEpoch(response);\n                if (firstEpoch === undefined || firstEpoch === end) {\n                    const newStart = start - (end - start);\n                    if (newStart <= startLimit) {\n                        // Passed available range. Prevent anymore pagination requests:\n                        callback({ moreAvailable: false, quotes: [] });\n                        this.setHasReachedEndOfData(true);\n                        return;\n                    }\n                    // Recursively extend the date range for more data until we exceed available range\n                    await this._getPaginationData(symbol, granularity, newStart, end, callback);\n                    return;\n                }\n                result.quotes = TickHistoryFormatter.formatHistory(response);\n                if (firstEpoch <= startLimit) {\n                    callback({ moreAvailable: false, quotes: [] });\n                    this.setHasReachedEndOfData(true);\n                }\n            } catch (err) {\n                console.error(err);\n                result = { error: err };\n            }\n        }\n        callback(result);\n        if (isMainChart) {\n            // ignore comparisons\n            // prevent overlapping by setting pagination end as firstEpoch\n            // if 'end' is greater than firstEpoch from feed\n            const paginationEnd = firstEpoch && end > firstEpoch ? firstEpoch : end;\n            this._emitter.emit(Feed.EVENT_ON_PAGINATION, { start, end: paginationEnd });\n        }\n    }\n    setHasReachedEndOfData(hasReachedEndOfData: boolean) {\n        this.paginationLoader.updateOnPagination(false);\n        if (this._mainStore.state.hasReachedEndOfData !== hasReachedEndOfData) {\n            this._mainStore.state.hasReachedEndOfData = hasReachedEndOfData;\n        }\n    }\n    unsubscribeAll() {\n        for (const key of Object.keys(this._activeStreams)) {\n            this._forgetStream(key);\n        }\n    }\n    _forgetIfEndEpoch(key: string) {\n        const subscription = this._activeStreams[key];\n        let result = true;\n        if (!subscription) {\n            return;\n        }\n        const lastEpoch = subscription.lastStreamEpoch;\n        if (\n            this.endEpoch &&\n            lastEpoch !== undefined &&\n            this.granularity !== undefined &&\n            lastEpoch + this.granularity > this.endEpoch\n        ) {\n            if (\n                this._activeStreams[key] &&\n                this.granularity === 0 &&\n                !this._mainStore.state.isStaticChart &&\n                CIQ.strToDateTime(getUTCDate(this.endEpoch)).valueOf() >=\n                    this._stx.chart.dataSet.slice(-1)[0]?.DT.valueOf()\n            ) {\n                result = false;\n            }\n            this._forgetStream(key);\n        } else {\n            result = false;\n        }\n        return result;\n    }\n    _appendChartData(quotes: TQuote[], key: string, comparisonChartSymbol?: string) {\n        console.log('');\n        console.warn('APPEND CHART DATA: ');\n        console.log(this._last_tick_timestamp);\n        console.log(this.last_tick_timestamp);\n        console.log(this._serverTime.getEpoch());\n        console.log(new Date().getTime());\n        const current_tick_timestamp = new Date().getTime();\n        // THE ISSUE CAN BE FIXED HERE\n        if (this._forgetIfEndEpoch(key) && !this._activeStreams[key]) {\n            quotes = [];\n            return;\n        }\n        if (\n            this.endEpoch &&\n            this._stx.chart.dataSet.slice(-1)[0] &&\n            CIQ.strToDateTime(getUTCDate(this.endEpoch)).valueOf() !== this._stx.chart.dataSet.slice(-1)[0].DT.valueOf()\n        ) {\n            this._stx.updateChartData(\n                [\n                    {\n                        DT: CIQ.strToDateTime(getUTCDate(this.endEpoch)),\n                        Close: null,\n                    },\n                ],\n                null,\n                { fillGaps: true }\n            );\n            this._stx.createDataSet();\n        }\n        if (comparisonChartSymbol) {\n            this._stx.updateChartData(quotes, null, {\n                secondarySeries: comparisonChartSymbol,\n                noCreateDataSet: true,\n            });\n        } else {\n            if (current_tick_timestamp - this.last_tick_timestamp < 10 * 1000) {\n                this._stx.updateChartData(quotes, null, {\n                    allowReplaceOHL: true,\n                });\n                this._stx.createDataSet();\n            }\n            else {\n                this._mainStore.chart.refreshChart();\n            }\n            this.last_tick_timestamp = current_tick_timestamp;\n        }\n        this._emitDataUpdate(quotes, comparisonChartSymbol);\n    }\n    _emitDataUpdate(quotes: TQuote[], comparisonChartSymbol?: string, isChartReinitialized = false) {\n        const prev = quotes[quotes.length - 2];\n        const prevClose = prev !== undefined ? prev.Close : undefined;\n        const dataUpdate = {\n            ...quotes[quotes.length - 1],\n            prevClose,\n        };\n        if (!comparisonChartSymbol) {\n            if (isChartReinitialized) {\n                this._emitter.emit(Feed.EVENT_MASTER_DATA_REINITIALIZE);\n                this._mainStore.chart.setChartAvailability(true);\n            } else {\n                this._emitter.emit(Feed.EVENT_MASTER_DATA_UPDATE, dataUpdate);\n            }\n        } else {\n            this._emitter.emit(Feed.EVENT_COMPARISON_DATA_UPDATE, {\n                symbol: comparisonChartSymbol,\n                ...dataUpdate,\n            });\n        }\n    }\n    static getFirstEpoch({ candles, history }: TicksHistoryResponse) {\n        if (candles && candles.length > 0) {\n            return candles[0].epoch;\n        }\n        if (history && history.times && history.times.length > 0) {\n            const { times } = history;\n            return +times[0];\n        }\n    }\n    onMasterDataUpdate(callback: Listener) {\n        this._emitter.on(Feed.EVENT_MASTER_DATA_UPDATE, callback);\n    }\n    offMasterDataUpdate(callback: Listener) {\n        this._emitter.off(Feed.EVENT_MASTER_DATA_UPDATE, callback);\n    }\n    onMasterDataReinitialize(callback: Listener) {\n        this._emitter.on(Feed.EVENT_MASTER_DATA_REINITIALIZE, callback);\n    }\n    offMasterDataReinitialize(callback: Listener) {\n        this._emitter.off(Feed.EVENT_MASTER_DATA_REINITIALIZE, callback);\n    }\n    onComparisonDataUpdate(callback: Listener) {\n        this._emitter.on(Feed.EVENT_COMPARISON_DATA_UPDATE, callback);\n    }\n    onPagination(callback: Listener) {\n        this._emitter.on(Feed.EVENT_ON_PAGINATION, callback);\n    }\n    offPagination(callback: Listener) {\n        this._emitter.off(Feed.EVENT_ON_PAGINATION, callback);\n    }\n    onStartPagination(callback: Listener) {\n        this._emitter.on(Feed.EVENT_START_PAGINATION, callback);\n    }\n    offStartPagination(callback: Listener) {\n        this._emitter.off(Feed.EVENT_START_PAGINATION, callback);\n    }\n    onConnectionChanged() {\n        const isOpened = this._mainStore.state.isConnectionOpened;\n        if (isOpened === undefined || isOpened === this._isConnectionOpened) {\n            return;\n        }\n        this._isConnectionOpened = isOpened;\n        if (isOpened) {\n            this._onConnectionReopened();\n        } else {\n            this._onConnectionClosed();\n        }\n    }\n    _onConnectionClosed() {\n        for (const key in this._activeStreams) {\n            this._activeStreams[key].pause();\n        }\n        this._connectionClosedDate = new Date();\n    }\n    _onConnectionReopened() {\n        const keys = Object.keys(this._activeStreams);\n        if (keys.length === 0) {\n            return;\n        }\n        const { granularity } = this._unpackKey(keys[0]);\n        const elapsedSeconds =\n            ((((new Date() as unknown) as number) - ((this._connectionClosedDate as unknown) as number)) / 1000) | 0;\n        const maxIdleSeconds = (granularity || 1) * this._stx.chart.maxTicks;\n        if (elapsedSeconds >= maxIdleSeconds) {\n            this._mainStore.chart.refreshChart();\n        } else {\n            for (const key of keys) {\n                this._resumeStream(key);\n            }\n        }\n        this._connectionClosedDate = undefined;\n    }\n    _resumeStream(key: string) {\n        const { symbol } = this._unpackKey(key);\n        const comparisonChartSymbol = this._stx.chart.symbol !== symbol ? symbol : undefined;\n\n        this._activeStreams[key].resume().then((params?: TQuoteResponse) => {\n            const { quotes } = params as TQuoteResponse;\n            if (this._stx.isDestroyed) return;\n            this._appendChartData(quotes, key, comparisonChartSymbol);\n        });\n    }\n    _getKey({ symbol, granularity }: { symbol: string; granularity: TGranularity }) {\n        return `${symbol}-${granularity}`;\n    }\n    _unpackKey(key: string) {\n        const [symbol, granularity] = key.split('-');\n        return { symbol, granularity: +granularity };\n    }\n    _trimQuotes(quotes: TQuote[] = []) {\n        let startTickIndex = null;\n        let endTickIndex = null;\n        let trimmedQuotes = quotes;\n        if (!trimmedQuotes.length) return [];\n        if (this.startEpoch && this.margin) {\n            startTickIndex = trimmedQuotes.findIndex(\n                tick => CIQ.strToDateTime(tick.Date) >= CIQ.strToDateTime(getUTCDate(this.startEpoch as number))\n            );\n            if (startTickIndex > -1) {\n                trimmedQuotes = trimmedQuotes.slice(startTickIndex - 1);\n            }\n        }\n        if (this.endEpoch && this.margin) {\n            endTickIndex = trimmedQuotes.findIndex(\n                tick => CIQ.strToDateTime(tick.Date) >= CIQ.strToDateTime(getUTCDate(this.endEpoch as number))\n            );\n            if (endTickIndex > -1) {\n                const addon = trimmedQuotes[endTickIndex].Date === getUTCDate(this.endEpoch) ? 2 : 1;\n                trimmedQuotes = trimmedQuotes.slice(0, endTickIndex + addon);\n            }\n        }\n        return trimmedQuotes;\n    }\n}\nexport default Feed;\n"],"sourceRoot":""}